###############################################
# GENERAL: running properties                 # 
###############################################

total_test_duration: 300 # seconds of application running

###############################################
# DATAFLOW: application (DAG) properties     #
###############################################

dataflow:
  ## DAG Depth
  depth:
    tree_levels: 3 # Number of the DAG levels (seen as a tree)

  ## Scalability

  # OPTION A
  scalability:
    parallelism: 10 # Total number of executors
  
  ## Connection and Dependency
  connection: 
    shape: linear #[linear, diamond, star]

  ## Traffic Balancing
  balanced_traffic: true # Boolean, true if routing between tasks is balanced, false otherwise
  # proposition, sobstitute with:
  # routing: [round-robin, hash, ???]

  ## Message Reliability
  message_reliability: true # Boolean, true to enable "acking-like" mechanism, false otherwise

  ## Processing
  workload:

    processing: 300 # CPU load value (may be implemented by keywoards (low, medium, high... pre-defined functions))
    #TODO: define what balanced mean, if unbalanced how the load is distributed?
    #TODO: should this be defined per component?
    #   (i.e. different components different computation)
    balancing: balanced # [balanced, increasing, decreasing, bell]


###############################################
# DATA_STREAM: input data properties          #
###############################################


# TODO: define if autogenerated or external
data_stream:
## Tuple Characteristics
# IMPORTANT: Leave uncommented the section related to the kind of
#             input data that you want to use
# + synthetic: data generated by spout (or equivalent)
# + external: data source connected (kafka, ...)

  synthetic:
    size: 8 # size of the single data
    data_type: text # [number, text][1]
    ## Input Ratio
    arrival_distribution: cbr # [unifrom, burst, saw-tooth, normal, bimodal]
      # Refer to [2] for different 'variable' arrival types 
  
  #TODO: check needed configurations, e.g. kafka topics
  # 
  # kafka:
  #   host: 127.0.0.1
  #   port: 1234
  #   topic: test_topic
  #   size: 8 # ??
  #   data_type: text


###############################################
# References                                  #
###############################################
#
# [1] R. Lu et al., "StreamBench: Towards Benchmarking Modern Distributed Stream Computing", UCC 2014
# [2] A. Shukla et al., "RIoTBench: An IoT benchmark for distributed stream processing systems", Concurrency and Computation 2017
#
